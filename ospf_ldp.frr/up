#!/usr/bin/env bash

SERVICE_LIBRARY="ospf"
DEBUG=true

# grab configuration
OSPF_SOURCE=${BASH_SOURCE[0]}
OSPF_SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

. $OSPF_SCRIPT_DIR/../functions.sh

cd $OSPF_SCRIPT_DIR

# load kernel modules for mpls
$enableMplsLdp && enable_mpls_kernel

composeSampleFile="$OSPF_SCRIPT_DIR/compose_sample.yaml"
composeDestFile="$OSPF_SCRIPT_DIR/compose.yaml"

bridge1Interface="$ospf1Interface.$ospf1InterfaceVlan"
bridge1Name="$ospf1BridgeName"
bridge2Interface="$ospf2Interface.$ospf2InterfaceVlan"
bridge2Name="$ospf2BridgeName"

# # physical or vlan interface connecting to the ospf router bridges
# ospf1BridgeName="msr-ospf1"
# ospf2BridgeName="ospf1-dn"
# ospf1Interface="ens7"
# ospf1InterfaceVlan="2550" # id '0' -> no vlan configuration
# ospf1IpAddress="192.168.3.20"
# ospf1BridgeSubnet="192.168.3.0/24"

build_compose_file
# create cidr notation and update config files
# currently only ospf10 and ospf20 require configs to be updated
prefix_from_cidr $ospf1BridgeSubnet
ospf1IpPrefix="$pfcPrefix"
ospf1IpAddressCidr="$ospf1IpAddress/$ospf1IpAddressPrefix"

prefix_from_cidr $ospf2BridgeSubnet
ospf2IpPrefix="$pfcPrefix"
ospf2IpAddressCidr="$ospf2IpAddress/$ospf2IpAddressPrefix"

# check whether we need to rebuild the configuration
check_prev_config "ospf1IpAddress"
sameO1Ip=$cpcOldEqNew
check_prev_config "ospf1BridgeSubnet"
sameO1Bs=$cpcOldEqNew
check_prev_config "ospf2IpAddress"
sameO2Ip=$cpcOldEqNew
check_prev_config "ospf2BridgeSubnet"
sameO2Bs=$cpcOldEqNew

# rebuild only if one is not the same
if ! ( $sameO1Ip && $sameO1Bs && $sameO2Ip && $sameO2Bs ); then
 build_frr_config 
else
  echo "No IP configuration change keep router config as is."
fi

wr_running_config $OSPF_SCRIPT_DIR

compose_up $SERVICE_LIBRARY 

bridge_interface attach $bridge1Interface $bridge1Name
bridge_interface attach $bridge2Interface $bridge2Name

# enable mpls on interfaces
if $enableMplsLdp; then
  enable_mpls_if $bridge1Interface
  enable_mpls_if $bridge2Interface
fi

exit

# followint is from prev ospf impl and may be useful when adding ipv6 support
# was implemented before compose_up

# need to get ipv6 address configuration into the container. Docker compose doesn't
# seem to work
cp $OSPF_SCRIPT_DIR/running.conf $OSPF_SCRIPT_DIR/volumes/ospf10/running.conf
cp $OSPF_SCRIPT_DIR/running.conf $OSPF_SCRIPT_DIR/volumes/ospf20/running.conf
cp $OSPF_SCRIPT_DIR/running.conf $OSPF_SCRIPT_DIR/volumes/ospf30/running.conf
cp $OSPF_SCRIPT_DIR/running.conf $OSPF_SCRIPT_DIR/volumes/dn/running.conf
