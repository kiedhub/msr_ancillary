#!/usr/bin/env bash

[ $DEBUG = true ] && echo "Calling: ${BASH_SOURCE[0]}"

aaa_library()
{
  # set interface type
  if [ $aaaInterfaceVlan = "0" ]; then
    aaaIf="$aaaInterface"
    isVlanIf="false"
  else
    aaaIf="$aaaInterface.$aaaInterfaceVlan"
    isVlanIf="true"
  fi

  aaaBS=$(echo $aaaBridgeSubnet | sed -e "s.\/.\\\/.g")

  # adds a physical interface to the radius bridge (for external reachability)
  attach_bridge_interface()
  {   
    # create vlan interface, if necessary 
    if [ $(sudo ip link show | grep "$aaaIf" | wc -l) -lt 1 ]; then
      if [ $isVlanIf = "true" ]; then
        ipv4_to_lamac $aaa1IpAddress
        create_vlan_interface $aaaIf
      fi
    fi

    if [ $(sudo brctl show $aaaBridgeName |grep $aaaIf |wc -l) -gt 0 ]; then
      echo "Interface $aaaIf already assigned to bridge, nothing to do"
      sudo brctl show $aaaBridgeName |grep $aaaIf
      return
    elif [ $(sudo brctl show | grep $aaaIf |wc -l) -gt 0 ]; then
      echo "Interface $aaaIf assigned to another bridge, please remove interface first"
      return
    fi

    sudo ip link set dev $aaaIf master $aaaBridgeName
  }

  detach_bridge_interface()
  {
    if [ $(sudo brctl show $aaaBridgeName |grep $aaaIf |wc -l) -gt 0 ]; then
      sudo ip link set dev $aaaInterface nomaster
    fi

    [ $isVlanIf = "true" ] && delete_vlan_interface $aaaIf

  }

  build_compose_file() {
    #echo $aaaBS
    cat $composeSampleFile | \
    sed -e "s/\$aaaBridgeName/$aaaBridgeName/g" \
      -e "s/\$aaa1IpAddress/$aaa1IpAddress/g" \
      -e "s/\$aaa2IpAddress/$aaa2IpAddress/g" \
      -e "s/\$aaaClientIpAddress/$aaaClientIpAddress/g" | \
      sed -e "s/\$aaaBridgeSubnet/$aaaBS/g" > $composeDestFile
    #cat $temp_yaml_file
  }

  build_configuration()
  {
    [ $DEBUG = true ] && echo "${FUNCNAME[0]}"
    # authorize, clients.conf, testrun

    #owner=$(ls -l $authDestFile | awk '{ print $3":"$4 }')
    owner="root:systemd-journal"

    # authorize file
    [ $DEBUG = true ] && echo "  Building $authDestFile"
    sudo chown $USER:$USER $authDestFile
    sudo cat $authTemplFile | \
      sed -e "s/\$aaaCasaVrfName/$aaaCasaVrfName/g" > $authDestFile
    #[ $DEBUG = true ] && head $authDestFile
    sudo chown $owner $authDestFile

    # clients.conf file
    [ $DEBUG = true ] && echo "  Building $clientsDestFile"
    sudo chown $USER:$USER $clientsDestFile
    [ $DEBUG = true ] && echo "  Parameters: $aaaBridgeSubnet, $aaaSecret, $clientsDestFile"
    sudo cat $clientsTemplFile | \
      sed -e "s/\$aaaBridgeSubnet/$aaaBS/g" \
          -e "s/\$aaaSecret/$aaaSecret/g" > $clientsDestFile
    [ $DEBUG = true ] && head $clientsDestFile
    sudo chown $owner $clientsDestFile

    # testrun file
    [ $DEBUG = true ] && echo "  Building $testrunDestFile"
    #sudo chown $USER:$USER $testrunDestFile
    #[ $DEBUG = true ] && echo "  Parameters: $aaaBridgeSubnet, $aaaSecret, $testrunDestFile"
    cat $testrunTemplFile | \
      sed -e "s/\$aaaSecret/$aaaSecret/g" \
          -e "s/\$aaa1IpAddress/$aaa1IpAddress/g" \
          -e "s/\$aaa2IpAddress/$aaa2IpAddress/g" > $testrunDestFile
    [ $DEBUG = true ] && head $testrunDestFile
    #sudo chown $owner $testrunDestFile
  }

  remove_running_conf_file()
  {
    # remove old file
    if [ -e $AAA_SCRIPT_DIR/running.conf ]; then
      sudo chmod +w $AAA_SCRIPT_DIR/running.conf
      rm -f $AAA_SCRIPT_DIR/running.conf
    fi
  }

  write_running_config()
  {
    remove_running_conf_file
    echo "# RUNNING CONFIGURATION, DO NOT EDIT THIS FILE!!!" > $AAA_SCRIPT_DIR/running.conf
    cat $FUNC_LIB_SCRIPT_DIR/ancillary.conf >> $AAA_SCRIPT_DIR/running.conf

    # make it read-only
    sudo chmod 444 $AAA_SCRIPT_DIR/running.conf
  }

  clean_up_directory()
  {
    echo "Re-setting ownership to $USER:$USER"
    sudo chown -R $USER:$USER $AAA_SCRIPT_DIR/volumes

    echo "Deleting log files"
    sudo rm -r $AAA_SCRIPT_DIR/volumes/log/
  }

}
