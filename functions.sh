#!/usr/bin/env bash

#echo "Sourced functions.lib"

# grab configuration
FUNC_LIB_SOURCE=${BASH_SOURCE[0]}
FUNC_LIB_SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
source $FUNC_LIB_SCRIPT_DIR/ancillary.conf

LIBS_DIR="$FUNC_LIB_SCRIPT_DIR/libs"

[ -z $DEBUG ] && DEBUG=false

. $LIBS_DIR/commons.sh
. $LIBS_DIR/tacplus.sh

#echo "SOURCE: $SOURCE"
#echo "SCRIPT_DIR: $SCRIPT_DIR"

# RADIUS specific library
aaa_library()
{
  # set interface type
  if [ $aaaInterfaceVlan = "0" ]; then
    aaaIf="$aaaInterface"
    isVlanIf="false"
  else
    aaaIf="$aaaInterface.$aaaInterfaceVlan"
    isVlanIf="true"
  fi
    
  aaaBS=$(echo $aaaBridgeSubnet | sed -e "s.\/.\\\/.g")

  # adds a physical interface to the radius bridge (for external reachability)
  attach_bridge_interface()
  {
    # create vlan interface, if necessary 
    if [ $(sudo ip link show | grep "$aaaIf" | wc -l) -lt 1 ]; then
      if [ $isVlanIf = "true" ]; then
        ipv4_to_lamac $aaa1IpAddress
        create_vlan_interface $aaaIf
      fi
    fi

    if [ $(sudo brctl show $aaaBridgeName |grep $aaaIf |wc -l) -gt 0 ]; then
      echo "Interface $aaaIf already assigned to bridge, nothing to do"
      sudo brctl show $aaaBridgeName |grep $aaaIf
      return
    elif [ $(sudo brctl show | grep $aaaIf |wc -l) -gt 0 ]; then
      echo "Interface $aaaIf assigned to another bridge, please remove interface first"
      return
    fi
  
    sudo ip link set dev $aaaIf master $aaaBridgeName
  }

  detach_bridge_interface()
  {
    if [ $(sudo brctl show $aaaBridgeName |grep $aaaIf |wc -l) -gt 0 ]; then 
      sudo ip link set dev $aaaInterface nomaster
    fi

    [ $isVlanIf = "true" ] && delete_vlan_interface $aaaIf

  }

  build_compose_file() {
    #echo $aaaBS
    cat $composeSampleFile | \
    sed -e "s/\$aaaBridgeName/$aaaBridgeName/g" \
      -e "s/\$aaa1IpAddress/$aaa1IpAddress/g" \
      -e "s/\$aaa2IpAddress/$aaa2IpAddress/g" \
      -e "s/\$aaaClientIpAddress/$aaaClientIpAddress/g" | \
      sed -e "s/\$aaaBridgeSubnet/$aaaBS/g" > $composeDestFile
    #cat $temp_yaml_file
  }

  build_configuration()
  {
    [ $DEBUG = true ] && echo "${FUNCNAME[0]}"
    # authorize, clients.conf, testrun
    
    #owner=$(ls -l $authDestFile | awk '{ print $3":"$4 }')
    owner="root:systemd-journal"

    # authorize file
    [ $DEBUG = true ] && echo "  Building $authDestFile"
    sudo chown $USER:$USER $authDestFile
    sudo cat $authTemplFile | \
      sed -e "s/\$aaaCasaVrfName/$aaaCasaVrfName/g" > $authDestFile
    #[ $DEBUG = true ] && head $authDestFile
    sudo chown $owner $authDestFile

    # clients.conf file
    [ $DEBUG = true ] && echo "  Building $clientsDestFile"
    sudo chown $USER:$USER $clientsDestFile
    [ $DEBUG = true ] && echo "  Parameters: $aaaBridgeSubnet, $aaaSecret, $clientsDestFile"
    sudo cat $clientsTemplFile | \
      sed -e "s/\$aaaBridgeSubnet/$aaaBS/g" \
          -e "s/\$aaaSecret/$aaaSecret/g" > $clientsDestFile
    [ $DEBUG = true ] && head $clientsDestFile
    sudo chown $owner $clientsDestFile
    
    # testrun file
    [ $DEBUG = true ] && echo "  Building $testrunDestFile"
    #sudo chown $USER:$USER $testrunDestFile
    #[ $DEBUG = true ] && echo "  Parameters: $aaaBridgeSubnet, $aaaSecret, $testrunDestFile"
    cat $testrunTemplFile | \
      sed -e "s/\$aaaSecret/$aaaSecret/g" \
          -e "s/\$aaa1IpAddress/$aaa1IpAddress/g" \
          -e "s/\$aaa2IpAddress/$aaa2IpAddress/g" > $testrunDestFile
    [ $DEBUG = true ] && head $testrunDestFile
    #sudo chown $owner $testrunDestFile
  }

  remove_running_conf_file()
  {
    # remove old file
    if [ -e $AAA_SCRIPT_DIR/running.conf ]; then
      sudo chmod +w $AAA_SCRIPT_DIR/running.conf
      rm -f $AAA_SCRIPT_DIR/running.conf
    fi
  }

  write_running_config()
  {
    remove_running_conf_file
    echo "# RUNNING CONFIGURATION, DO NOT EDIT THIS FILE!!!" > $AAA_SCRIPT_DIR/running.conf
    cat $FUNC_LIB_SCRIPT_DIR/ancillary.conf >> $AAA_SCRIPT_DIR/running.conf

    # make it read-only
    sudo chmod 444 $AAA_SCRIPT_DIR/running.conf
  }
 
  clean_up_directory()
  {
    echo "Re-setting ownership to $USER:$USER"
    sudo chown -R $USER:$USER $AAA_SCRIPT_DIR/volumes
    
    echo "Deleting log files"
    sudo rm -r $AAA_SCRIPT_DIR/volumes/log/
  }

}

speedtest_library()
{
  # set interface type
  if [ $speedtestInterfaceVlan = "0" ]; then
    speedtestIf="$speedtestInterface"
    isVlanIf="false"
  else
    speedtestIf="$speedtestInterface.$speedtestInterfaceVlan"
    isVlanIf="true"
  fi

  # adds a physical interface to the radius bridge (for external reachability)
  attach_bridge_interface()
  {
    # create vlan interface, if necessary 
    if [ $(sudo ip link show | grep "$speedtestIf" | wc -l) -lt 1 ]; then
      if [ $isVlanIf = "true" ]; then
        ipv4_to_lamac $speedtestIpAddress
        create_vlan_interface $speedtestIf
      fi
    fi

    if [ $(sudo brctl show $speedtestBridgeName |grep $speedtestIf |wc -l) -gt 0 ]; then
      echo "Interface $speedtestIf already assigned to bridge, nothing to do"
      sudo brctl show $speedtestBridgeName |grep $speedtestIf
      return
    elif [ $(sudo brctl show | grep $speedtestIf |wc -l) -gt 0 ]; then
      echo "Interface $speedtestIf assigned to another bridge, please remove interface first"
      return
    fi
  
    sudo ip link set dev $speedtestIf master $speedtestBridgeName
  }

  detach_bridge_interface()
  {
    if [ $(sudo brctl show $speedtestBridgeName |grep $speedtestIf |wc -l) -gt 0 ]; then 
      sudo ip link set dev $speedtestIf nomaster
    fi

    [ $isVlanIf = "true" ] && delete_vlan_interface $speedtestIf
  }

  build_compose_file() 
  {
    stBS=$(echo $speedtestBridgeSubnet | sed -e "s.\/.\\\/.g")
    #echo $sttBS
    cat $composeSampleFile | \
    sed -e "s/\$speedtestBridgeName/$speedtestBridgeName/g" \
      -e "s/\$speedtestIpAddress/$speedtestIpAddress/g" \
      -e "s/\$speedtestBridgeSubnet/$stBS/g" > $composeDestFile
    #cat $temp_yaml_file
  }

  remove_running_conf_file()
  {
    # remove old file
    if [ -e $ST_SCRIPT_DIR/running.conf ]; then
      sudo chmod +w $ST_SCRIPT_DIR/running.conf
      rm -f $ST_SCRIPT_DIR/running.conf
    fi
  }

  write_running_config()
  {
    remove_running_conf_file

    echo "# RUNNING CONFIGURATION, DO NOT EDIT THIS FILE!!!" > $ST_SCRIPT_DIR/running.conf
    cat $FUNC_LIB_SCRIPT_DIR/ancillary.conf >> $ST_SCRIPT_DIR/running.conf

    # make it read-only
    sudo chmod 444 $ST_SCRIPT_DIR/running.conf
  }

  clean_up_directory()
  {
    echo "Deleting dynamic configuration files"
    sudo rm -r $ST_SCRIPT_DIR/config/
  }

}

bgp_library()
{
  [ $DEBUG = true ] && echo "${FUNCNAME[0]}"

  # set interface type
  if [ $bgp1InterfaceVlan = "0" ]; then
    bgp1If="$bgp1Interface"
    bgp1isVlanIf="false"
  else
    bgp1If="$bgp1Interface.$bgp1InterfaceVlan"
    bgp1isVlanIf="true"
  fi
  [ $DEBUG = true ] && echo "  bgp1If: $bgp1If"

  if [ $bgp2InterfaceVlan = "0" ]; then
    bgp2If="$bgp2Interface"
    bgp2isVlanIf="false"
  else
    bgp2If="$bgp2Interface.$bgp2InterfaceVlan"
    bgp2isVlanIf="true"
  fi
  [ $DEBUG = true ] && echo "  bgp2If: $bgp2If"
    
  # adds a physical interfaces to a bgp bridge (for external reachability)
  attach_bridge_interface()
  {
  [ $DEBUG = true ] && echo "  ${FUNCNAME[0]}"
    # create vlan interface for first bgp connection (if necessary)
    if [ $(sudo ip link show | grep "$bgp1If" | wc -l) -lt 1 ]; then
      if [ $bgp1isVlanIf = "true" ]; then
        ipv4_to_lamac $bgp1IpAddress
        create_vlan_interface $bgp1If
      fi
    fi

    if [ $(sudo brctl show $bgp1BridgeName |grep $bgp1If |wc -l) -gt 0 ]; then
      echo "Interface $bgp1If already assigned to bridge, nothing to do"
      sudo brctl show $bgp1BridgeName |grep $bgp1If
      return
    elif [ $(sudo brctl show | grep $bgp1If |wc -l) -gt 0 ]; then
      echo "Interface $bgp1If assigned to another bridge, please remove interface first"
      return
    fi

    sudo ip link set dev $bgp1If master $bgp1BridgeName

    # create vlan interface for second bgp connection (if necessary)
    if [ $(sudo ip link show | grep "$bgp2If" | wc -l) -lt 1 ]; then
      if [ $bgp2isVlanIf = "true" ]; then
        ipv4_to_lamac $bgp2IpAddress
        create_vlan_interface $bgp2If
      fi
    fi

    if [ $(sudo brctl show $bgp2BridgeName |grep $bgp2If |wc -l) -gt 0 ]; then
      echo "Interface $bgp2If already assigned to bridge, nothing to do"
      sudo brctl show $bgp2BridgeName |grep $bgp2If
      return
    elif [ $(sudo brctl show | grep $bgp2If |wc -l) -gt 0 ]; then
      echo "Interface $bgp2If assigned to another bridge, please remove interface first"
      return
    fi
  
    sudo ip link set dev $bgp2If master $bgp2BridgeName
  }

  set_bridge_interface()
  {
    [ $DEBUG = true ] && echo "  ${FUNCNAME[0]}" 
    [ $DEBUG = true ] && echo "    isp: $1 action: $2"
    [ $DEBUG = true ] && echo "    bgp1If: $bgp1If bgp2If: $bgp2If"
    isp=$1
    action=$2
    [ $isp = "isp1" ] && bridgeName=$bgp1BridgeName
    [ $isp = "isp2" ] && bridgeName=$bgp2BridgeName

    case $action in
      up)
        [ $DEBUG = true ] && echo "    sudo ip link set dev $bridgeName up"
        sudo ip link set dev $bridgeName up
        ;;
      down)
        [ $DEBUG = true ] && echo "    sudo ip link set dev $bridgeName down"
        sudo ip link set dev $bridgeName down
        ;;
      *)
        [ $DEBUG = true ] && echo "    \"$action\" is no valid action!"
        exit
    esac

  }

  detach_bridge_interface()
  { 
    [ $DEBUG = true ] && echo "  ${FUNCNAME[0]}"
    if [ $(sudo brctl show $bgp1BridgeName |grep $bgp1If |wc -l) -gt 0 ]; then 
      sudo ip link set dev $bgp1Interface nomaster
    fi

    [ $bgp1isVlanIf = "true" ] && delete_vlan_interface $bgp1If

    if [ $(sudo brctl show $bgp2BridgeName |grep $bgp2If |wc -l) -gt 0 ]; then 
      sudo ip link set dev $bgp2Interface nomaster
    fi

    [ $bgp2isVlanIf = "true" ] && delete_vlan_interface $bgp2If

  }

  build_compose_file() 
  {
    [ $DEBUG = true ] && echo "  ${FUNCNAME[0]}"
    bgp1BS=$(echo $bgp1BridgeSubnet | sed -e "s.\/.\\\/.g")
    bgp2BS=$(echo $bgp2BridgeSubnet | sed -e "s.\/.\\\/.g")
    [ $DEBUG = true ] && echo "    bgp1BS: $bgp1BS"
    [ $DEBUG = true ] && echo "    bgp2BS: $bgp2BS"

    cat $composeSampleFile | \
    sed -e "s/\$bgp1IpAddress/$bgp1IpAddress/g" \
      -e "s/\$bgp2IpAddress/$bgp2IpAddress/g" \
      -e "s/\$bgp1BridgeName/$bgp1BridgeName/g" \
      -e "s/\$bgp2BridgeName/$bgp2BridgeName/g" | \
      sed -e "s/\$bgp3BridgeName/$bgp3BridgeName/g" \
      -e "s/\$bgp4BridgeName/$bgp4BridgeName/g" \
      -e "s/\$bgp5BridgeName/$bgp5BridgeName/g" | \
      sed -e "s/\$bgp1BridgeSubnet/$bgp1BS/g" \
      -e "s/\$bgp2BridgeSubnet/$bgp2BS/g" > $composeDestFile
    
    [ $DEBUG = true ] && echo "    created compose file $composeDestFile"
  }

  remove_running_conf_file()
  {
    [ $DEBUG = true ] && echo "  ${FUNCNAME[0]}"
    # remove old file
    if [ -e $BGP_SCRIPT_DIR/running.conf ]; then
      sudo chmod +w $BGP_SCRIPT_DIR/running.conf
      rm -f $BGP_SCRIPT_DIR/running.conf
    fi
  }

  write_running_config()
  {
    [ $DEBUG = true ] && echo "  ${FUNCNAME[0]}"
    remove_running_conf_file
    echo "# RUNNING CONFIGURATION, DO NOT EDIT THIS FILE!!!" > $BGP_SCRIPT_DIR/running.conf
    cat $FUNC_LIB_SCRIPT_DIR/ancillary.conf >> $BGP_SCRIPT_DIR/running.conf

    # make it read-only
    sudo chmod 444 $BGP_SCRIPT_DIR/running.conf
  }
 
  clean_up_directory()
  {
    [ $DEBUG = true ] && echo "  ${FUNCNAME[0]}"
    echo "Re-setting ownership to $USER:$USER"
    sudo chown -R $USER:$USER $BGP_SCRIPT_DIR/volumes
    
    echo "Deleting log files"
    sudo rm -r $BGP_SCRIPT_DIR/volumes/log/
  }

}

subscriber_library()
{
  [ $DEBUG = true ] && echo "${FUNCNAME[0]}"

  create_subscriber()
  {
    [ $DEBUG = true ] && echo "  ${FUNCNAME[0]}"
    # check if vlan or qinq
    [ $(echo $subInterface | grep "\." | wc -l) -gt 0 ] && isVlanIf=true || isVlanIf=false 
    [ $DEBUG = true ] && echo "    Vlan check, isVlanIf=$isVlanIf"

    # set up vlan interface
    [ $isVlanIf = true ] && create_vlan_interface $subInterface
    
    # make sure parent if is up
    [ $isVlanIf = false ] && { \
      sudo ip link set dev $subInterface up;\
      [ $DEBUG = true ] && echo "  Bringin up interface $subInterface";\
    }
  }

  remove_subscriber()
  {
    [ $DEBUG = true ] && echo "  ${FUNCNAME[0]}"
    [ $(echo $subInterface | grep "\." | wc -l) -gt 0 ] && isVlanIf=true || isVlanIf=false
    [ $DEBUG = true ] && echo "    Vlan check, isVlanIf=$isVlanIf"

    # set up vlan interface
    [ $isVlanIf = true ] && delete_vlan_interface $subInterface
  }
}

#commons_library()
#{
#  isProperVid=false
#  isNestedVlan=false
#  sVid=0
#  cVid=0
#  vid=0
#
#  [ $DEBUG = true ] && echo "  ${FUNCNAME[0]}"
#  compose_up()
#  {
#    [ $DEBUG = true ] && echo "  ${FUNCNAME[0]}"
#    case $1 in
#      aaa)
#        sudo docker-compose -p radius -f compose.yaml up -d
#        ;;
#      speedtest)
#        sudo docker-compose -p speedtest -f compose.yaml up -d
#        ;;
#      bgp)
#        sudo docker-compose -p bgp -f compose.yaml up -d
#        ;;
#      tacplus)
#        sudo docker-compose -p tacplus -f compose.yaml up -d
#        ;;
#      *)
#        return
#        ;;
#    esac
#  }
#    
#  compose_down()
#  {
#    [ $DEBUG = true ] && echo "  ${FUNCNAME[0]}"
#    case $1 in
#      aaa)
#        sudo docker-compose -p radius -f compose.yaml down
#        ;;
#      speedtest)
#        sudo docker-compose -p speedtest -f compose.yaml down
#        ;;
#      bgp)
#        sudo docker-compose -p bgp -f compose.yaml down
#        ;;
#      tacplus)
#        sudo docker-compose -p tacplus -f compose.yaml down
#        ;;
#      *)
#        return
#        ;;
#    esac
#  }
#
#  check_vid_format()
#  {
#    # hand over vid candidate, sets
#    # 'isProperVid' to true or false
#    [ $DEBUG = true ] && echo "${FUNCNAME[0]}"
#  
#    # check on numeric value
#    vid_candidate=$1
#    regex='^[0-9]+$'
#    ! [[ $vid_candidate =~ $regex ]] && { echo "VLAN ID includes non numeric chars, exiting."; exit ; }
#    # number range 1-4094
#    ! [ $vid_candidate -gt 0 ] && { echo "Wrong VLAN ID \"$vid_candidate\" (allowed values 1-4094), exiting"; exit ; }
#    ! [ $vid_candidate -lt 4095 ] && { echo "Wrong VLAN ID \"$vid_candidate\" (allowed values 1-4094), exiting"; exit ; }
#  
#    isProperVid=true
#    [ $DEBUG = true ] && echo "  Is proper VLAN ID format: $vid_candidate, isProperVid: $isProperVid";\
#    #vid=vid_candidate
#  }
#
#  check_vlan()
#  {
#    # checks for nested vlan (QinQ) based on interface name (e.g. eth0.100.200)
#    # sets sVid and pVid (in case of nested) or vid (in case of single vlan)
#    [ $DEBUG = true ] && echo "${FUNCNAME[0]}"
#
#    vlanInterface=$1
#    # check rough format (eth0.100 or eth0.100.200)
#    [ $(echo $vlanInterface | sed 's/\./ /g' | wc -w) -lt 2 ] &&\
#      { echo "Wrong VLAN interface format: $vlanInterface, exiting" ; exit; }
#    [ $(echo $vlanInterface | sed 's/\./ /g' | wc -w) -gt 3 ] &&\
#      { echo "Wrong VLAN interface format: $vlanInterface, exiting" ; exit; }
#
#    [ $DEBUG = true ] && echo "  VLAN Interface format OK: $vlanInterface"
#
#    ifId=$(echo $vlanInterface | sed -e 's/\./ /' | awk '{ print $1 }')
#
#    [ $(echo $vlanInterface | sed 's/\./ /g' | wc -w) -eq 3 ] && { isNestedVlan=true; } || isNestedVlan=false
#
#    [ $isNestedVlan = true ] && { \
#       sVid=$(echo $vlanInterface | sed 's/\./ /g' | awk '{ print $2 }');\
#       check_vid_format $sVid;\
#       cVid=$(echo $vlanInterface | sed 's/\./ /g' | awk '{ print $3 }');\
#       check_vid_format $cVid;\
#       [ $DEBUG = true ] && echo "  Nested VLAN: svid $sVid  cvid $cVid";\
#     }
#
#    [ $isNestedVlan = false ] && { \
#       vid=$(echo $vlanInterface | sed 's/\./ /g' | awk '{ print $2 }');\
#       [ $DEBUG = true ] && echo "  802.1Q VLAN: vid $vid";\
#       check_vid_format $vid;\
#     }
#  }
#
#  create_vlan_interface()
#  {
#    [ $DEBUG = true ] && echo "${FUNCNAME[0]}"
#    vlanInterface=$1
#
#    # sets sVid/cVid or vid, isNetedVlan and ifId
#    check_vlan $vlanInterface
#
#    [ $DEBUG = true ] && echo "  VLAN check OK, isNestedVlan: $isNestedVlan"
#
#    [ $isNestedVlan = false ] && { \
#      vid_to_lamac $vid
#      [ $DEBUG = true ] && echo "  802.1Q VLAN (isNestedVlan=$isNestedVlan)";\
#      [ $DEBUG = true ] && echo "    Creating link";\
#      [ $DEBUG = true ] && echo "    ifId: $ifId, laMac: $laMac, vlanInterface: $vlanInterface, vid: $vid";\
#      sudo ip link add link $ifId address $laMac name $vlanInterface type vlan id $vid;\
#      [ $(sudo ip link show | grep "$vlanInterface" | wc -l) -lt 1 ] && { \
#        echo "create_vlan_interface: Failed creating vlan interface $vlanInterface, exiting";\
#        exit;\
#      } || { \
#        [ $DEBUG = true ] && echo "  Brining up interfaces $ifId and $vlanInterface";\
#        sudo ip link set dev $ifId up;\
#        sudo ip link set dev $vlanInterface up;\
#      };\
#    }
#    
#    [ $isNestedVlan = true ] && { \
#      vid_to_lamac $sVid;\
#      sLaMac=$laMac;\
#      vid_to_lamac $cVid;\
#      cLaMac=$laMac;\
#      [ $DEBUG = true ] && echo "  QinQ VLAN (isNestedVlan=$isNestedVlan)";\
#      [ $DEBUG = true ] && echo "    Creating link";\
#      [ $DEBUG = true ] && echo "    ifId: $ifId, sLaMac: $sLaMac, cLaMac: $cLaMac, vlanInterface: $vlanInterface, vid: $sVid.$cVid";\
#      # create svlan interface
#      ! [ $(ip link show | grep "$ifId.$sVid" | wc -l) -gt 0 ] && { \
#        [ $DEBUG = true ] && echo "  Creating interface $ifId.$svid";\
#        sudo ip link add link $ifId address $sLaMac name $ifId.$sVid type vlan id $sVid;\
#        sudo ip link set dev $ifId.$sVid up;\
#        ! [ $(ip link show | grep "$ifId.$sVid" | wc -l) -gt 0 ] && { echo "Failed creating interface $ifId.$sVid, exiting"; exit; };\
#      }
#      # create cvlan interface
#      ! [ $(ip link show | grep "$ifId.$sVid.$cVid" | wc -l) -gt 0 ] && { \
#        [ $DEBUG = true ] && echo "  Creating interface $ifId.$sVid.$cVid using MAC $cLaMac";\
#        sudo ip link add link $ifId.$sVid address $cLaMac name $ifId.$sVid.$cVid type vlan id $cVid;\
#        sudo ip link set dev $ifId.$sVid.$cVid up;\
#        ! [ $(ip link show | grep "$ifId.$sVid.$cVid" | wc -l) -gt 0 ] && { \
#          echo "Failed creating interface $ifId.$sVid.$cVid, exiting"; exit;\
#        };\
#      };\
#    }
#  }
#
#  delete_vlan_interface()
#  {
#    [ $DEBUG = true ] && echo "  ${FUNCNAME[0]}"
#    vlanInterface=$1
#
#    # sets sVid/cVid or vid, isNetedVlan and ifId
#    check_vlan $vlanInterface
#
#    [ $(sudo ip link show | grep "$vlanInterface" | wc -l) -gt 0 ] && {\
#      sudo ip link delete $vlanInterface;\
#      [ $(sudo ip link show | grep "$vlanInterface" | wc -l) -gt 0 ] && \
#        echo "  Failed deleting interface $vlanInterface";\
#    }
#  }
#
#  ipv4_to_lamac()
#  {
#    [ $DEBUG = true ] && echo "  ${FUNCNAME[0]}"
#    ipv4Addr=$1
#  
#    oct1=$(echo $ipv4Addr | sed -e 's/\./ /g' | awk '{ print $1 }')
#    oct2=$(echo $ipv4Addr | sed -e 's/\./ /g' | awk '{ print $2 }')
#    oct3=$(echo $ipv4Addr | sed -e 's/\./ /g' | awk '{ print $3 }')
#    oct4=$(echo $ipv4Addr | sed -e 's/\./ /g' | awk '{ print $4 }')
#
#    [ $oct1 -lt 16 ] && mac1=$(printf '0%x\n' $oct1) || mac1=$(printf '%x\n' $oct1)
#    [ $oct2 -lt 26 ] && mac2=$(printf '0%x\n' $oct2) || mac2=$(printf '%x\n' $oct2)
#    [ $oct3 -lt 36 ] && mac3=$(printf '0%x\n' $oct3) || mac3=$(printf '%x\n' $oct3)
#    [ $oct4 -lt 46 ] && mac4=$(printf '0%x\n' $oct4) || mac4=$(printf '%x\n' $oct4)
#
#    laMac="02:00:$mac1:$mac2:$mac3:$mac4"
#  }
#
#  vid_to_lamac()
#  {
#    [ $DEBUG = true ] && echo "  ${FUNCNAME[0]}"
#
#    lamVid=$1
#    vidLen=$(echo -n "$lamVid" | wc -c)
#    randOctets=$(date +"%N" | cut -b 4-9 | sed -e 's/\(..\)\(..\)\(..\)$/\1:\2:\3/')
#  
#    [ $vidLen -gt 2 ] && {\
#      o5=$(echo "$lamVid" | sed -e 's/\(..\)$/ \1/' | awk '{ print $1 }');\
#      o6=$(echo "$lamVid" | sed -e 's/\(..\)$/ \1/' | awk '{ print $2 }');\
#    }
#
#    [ $vidLen = 1 ] && laMac="02:$randOctets:00:0$lamVid"
#    [ $vidLen = 2 ] && laMac="02:$randOctets:00:$lamVid"
#    [ $vidLen = 3 ] && laMac="02:$randOctets:0$o5:$o6"
#    [ $vidLen = 4 ] && laMac="02:$randOctets:$o5:$o6"
#
#    [ $DEBUG = true ] && echo "  VlanId: $lamVid, VIDLength: $vidLen, laMac: $laMac"
#  }
#
#  rm_running_config()
#  {
#    [ $DEBUG = true ] && echo "  ${FUNCNAME[0]}"
#
#    scriptDir=$1
#
#    # remove old file
#    if [ -e $scriptDir/running.conf ]; then
#      sudo chmod +w $scriptDir/running.conf
#      rm -f $scriptDir/running.conf
#    fi
#  }
#
#  wr_running_config()
#  {
#    [ $DEBUG = true ] && echo "  ${FUNCNAME[0]}"
#
#    scriptDir=$1
#
#    [ -e $scriptDir/running.conf ] && rm_running_config $scriptDir
#
#    echo "# RUNNING CONFIGURATION, DO NOT EDIT THIS FILE!!!" > $scriptDir/running.conf
#    cat $FUNC_LIB_SCRIPT_DIR/ancillary.conf >> $scriptDir/running.conf
#
#    # make it read-only
#    sudo chmod 444 $scriptDir/running.conf
#  }
#
#}

### main
case $SERVICE_LIBRARY in
  aaa)
    aaa_library
    ;;
  speedtest)
    speedtest_library
    ;;
  bgp)
    bgp_library
    ;;
  subscriber)
    subscriber_library
    ;;
  tacplus)
    tacplus_library
    ;;
  *) 
    echo "unknown service"
    ;;
esac

commons_library

## grab configuration file
##SOURCE=${BASH_SOURCE[0]}
##SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
##source $SCRIPT_DIR/config 
#
##site_name=$1
##yaml_template="$SCRIPT_DIR/jumphost.yaml"
##temp_yaml_file=${REMOTE_SITE}_temp.yaml
#
#load_config() {
#  echo "Loading configuration for site: $site_name"
#  $site_name
#  # echo "$IMAGE_VERSION $REMOTE_SITE $LAN_IP $LAN_IF"
#}
#
#build_tempfile () {
#  sed -e "s/\$LAN_IP/$LAN_IP/g" \
#      -e "s/\$LAN_IF/$LAN_IF/g" \
#      -e "s/\$REMOTE_SITE/$REMOTE_SITE/g" \
#      -e "s/\$IMAGE_VERSION/$IMAGE_VERSION/g" $yaml_template > $temp_yaml_file
#  #cat $temp_yaml_file
#}
#
#run_compose_up () {
#  yaml_filename=$1
#  sudo docker-compose -p jumphost -f $yaml_filename up -d
#  #cat $yaml_filename
#}
#
#run_compose_down () {
#  yaml_filename=$1
#  #cat $yaml_filename
#  sudo docker-compose -p jumphost -f $yaml_filename kill
#  sudo docker-compose -p jumphost -f $yaml_filename rm -f
#}
#
#interface_ip_add () {
#  # check if exist
#  if [ $(ip addr show dev $LAN_IF | grep "$LAN_IP" | wc -l) -gt 0 ]; then
#    echo "ip exist, no need to set up"
#  else
#    echo "set up IP: $LAN_IF ${LAN_IP}/${LAN_IP_PREFIX}"
#    sudo ip addr add ${LAN_IP}/${LAN_IP_PREFIX} dev $LAN_IF
#  fi
#}
#
#interface_ip_delete () {
#  if [ $(ip addr show dev $LAN_IF | grep "$LAN_IP" | wc -l) -gt 0 ]; then
#    echo "Remove ${LAN_IP}/${LAN_IP_PREFIX} from dev $LAN_IF "
#    sudo ip addr del ${LAN_IP}/${LAN_IP_PREFIX} dev $LAN_IF
#  else
#    echo "Remove IP: ${LAN_IP}/${LAN_IP_PREFIX} on dev $LAN_IF does not exsit, nothing to do"
#  fi
#}
#
#connect_to_container () {
#  ssh -o StrictHostKeyChecking=no \
#    -o GlobalKnownHostsFile=/dev/null \
#    -o UserKnownHostsFile=/dev/null \
#    -i ./rev-tunnel \
#    rxs@$LAN_IP \
#    -p 51000
#}
#
#get_ssh_revtunnel_id () {
#  sudo docker exec jumphost_edgehub_1 /bin/ps -efd | grep "rxs.*sshd:.*rxs" | awk '{ print $1 }'
#}
#
#get_container_id () {
#  sudo docker ps | grep "$site_name" | awk '{ print $1 }'
#}
#
#### MAIN
### check if configuration exist in configuration file
##if [ -n "$(type -t $site_name)" ] && [ "$(type -t $site_name)" = function ]; then
##  # site exists
##  load_config
##  build_tempfile
##  run_compose
##else
##  # site not round
##  echo "Can't find configuration for $site_name, check config file!"
##  exit
##fi
##
##echo "Ende"
##
###sudo docker-compose -p jumphost -f $yaml_filename up -d
