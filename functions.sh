#!/usr/bin/env bash

#echo "Sourced functions.lib"

# grab configuration
FUNC_LIB_SOURCE=${BASH_SOURCE[0]}
FUNC_LIB_SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
source $FUNC_LIB_SCRIPT_DIR/ancillary.conf

LIBS_DIR="$FUNC_LIB_SCRIPT_DIR/libs"

[ -z $DEBUG ] && DEBUG=false

. $LIBS_DIR/commons.sh
. $LIBS_DIR/tacplus.sh
. $LIBS_DIR/subscriber.sh
. $LIBS_DIR/aaa.sh
. $LIBS_DIR/speedtest.sh
. $LIBS_DIR/bgp.sh
. $LIBS_DIR/ospf.sh

### main
case $SERVICE_LIBRARY in
  aaa)
    aaa_library
    ;;
  speedtest)
    speedtest_library
    ;;
  bgp)
    bgp_library
    ;;
  subscriber)
    subscriber_library
    ;;
  tacplus)
    tacplus_library
    ;;
  ospf)
    ospf_library
    ;;
  *) 
    echo "${BASH_SOURCE[0]}: Trying to call unknown library \"$SERVICE_LIBRARY\""
    exit
    ;;
esac

commons_library


#echo "SOURCE: $SOURCE"
#echo "SCRIPT_DIR: $SCRIPT_DIR"

# RADIUS specific library
#aaa_library()
#{
#  # set interface type
#  if [ $aaaInterfaceVlan = "0" ]; then
#    aaaIf="$aaaInterface"
#    isVlanIf="false"
#  else
#    aaaIf="$aaaInterface.$aaaInterfaceVlan"
#    isVlanIf="true"
#  fi
#    
#  aaaBS=$(echo $aaaBridgeSubnet | sed -e "s.\/.\\\/.g")
#
#  # adds a physical interface to the radius bridge (for external reachability)
#  attach_bridge_interface()
#  {
#    # create vlan interface, if necessary 
#    if [ $(sudo ip link show | grep "$aaaIf" | wc -l) -lt 1 ]; then
#      if [ $isVlanIf = "true" ]; then
#        ipv4_to_lamac $aaa1IpAddress
#        create_vlan_interface $aaaIf
#      fi
#    fi
#
#    if [ $(sudo brctl show $aaaBridgeName |grep $aaaIf |wc -l) -gt 0 ]; then
#      echo "Interface $aaaIf already assigned to bridge, nothing to do"
#      sudo brctl show $aaaBridgeName |grep $aaaIf
#      return
#    elif [ $(sudo brctl show | grep $aaaIf |wc -l) -gt 0 ]; then
#      echo "Interface $aaaIf assigned to another bridge, please remove interface first"
#      return
#    fi
#  
#    sudo ip link set dev $aaaIf master $aaaBridgeName
#  }
#
#  detach_bridge_interface()
#  {
#    if [ $(sudo brctl show $aaaBridgeName |grep $aaaIf |wc -l) -gt 0 ]; then 
#      sudo ip link set dev $aaaInterface nomaster
#    fi
#
#    [ $isVlanIf = "true" ] && delete_vlan_interface $aaaIf
#
#  }
#
#  build_compose_file() {
#    #echo $aaaBS
#    cat $composeSampleFile | \
#    sed -e "s/\$aaaBridgeName/$aaaBridgeName/g" \
#      -e "s/\$aaa1IpAddress/$aaa1IpAddress/g" \
#      -e "s/\$aaa2IpAddress/$aaa2IpAddress/g" \
#      -e "s/\$aaaClientIpAddress/$aaaClientIpAddress/g" | \
#      sed -e "s/\$aaaBridgeSubnet/$aaaBS/g" > $composeDestFile
#    #cat $temp_yaml_file
#  }
#
#  build_configuration()
#  {
#    [ $DEBUG = true ] && echo "${FUNCNAME[0]}"
#    # authorize, clients.conf, testrun
#    
#    #owner=$(ls -l $authDestFile | awk '{ print $3":"$4 }')
#    owner="root:systemd-journal"
#
#    # authorize file
#    [ $DEBUG = true ] && echo "  Building $authDestFile"
#    sudo chown $USER:$USER $authDestFile
#    sudo cat $authTemplFile | \
#      sed -e "s/\$aaaCasaVrfName/$aaaCasaVrfName/g" > $authDestFile
#    #[ $DEBUG = true ] && head $authDestFile
#    sudo chown $owner $authDestFile
#
#    # clients.conf file
#    [ $DEBUG = true ] && echo "  Building $clientsDestFile"
#    sudo chown $USER:$USER $clientsDestFile
#    [ $DEBUG = true ] && echo "  Parameters: $aaaBridgeSubnet, $aaaSecret, $clientsDestFile"
#    sudo cat $clientsTemplFile | \
#      sed -e "s/\$aaaBridgeSubnet/$aaaBS/g" \
#          -e "s/\$aaaSecret/$aaaSecret/g" > $clientsDestFile
#    [ $DEBUG = true ] && head $clientsDestFile
#    sudo chown $owner $clientsDestFile
#    
#    # testrun file
#    [ $DEBUG = true ] && echo "  Building $testrunDestFile"
#    #sudo chown $USER:$USER $testrunDestFile
#    #[ $DEBUG = true ] && echo "  Parameters: $aaaBridgeSubnet, $aaaSecret, $testrunDestFile"
#    cat $testrunTemplFile | \
#      sed -e "s/\$aaaSecret/$aaaSecret/g" \
#          -e "s/\$aaa1IpAddress/$aaa1IpAddress/g" \
#          -e "s/\$aaa2IpAddress/$aaa2IpAddress/g" > $testrunDestFile
#    [ $DEBUG = true ] && head $testrunDestFile
#    #sudo chown $owner $testrunDestFile
#  }
#
#  remove_running_conf_file()
#  {
#    # remove old file
#    if [ -e $AAA_SCRIPT_DIR/running.conf ]; then
#      sudo chmod +w $AAA_SCRIPT_DIR/running.conf
#      rm -f $AAA_SCRIPT_DIR/running.conf
#    fi
#  }
#
#  write_running_config()
#  {
#    remove_running_conf_file
#    echo "# RUNNING CONFIGURATION, DO NOT EDIT THIS FILE!!!" > $AAA_SCRIPT_DIR/running.conf
#    cat $FUNC_LIB_SCRIPT_DIR/ancillary.conf >> $AAA_SCRIPT_DIR/running.conf
#
#    # make it read-only
#    sudo chmod 444 $AAA_SCRIPT_DIR/running.conf
#  }
# 
#  clean_up_directory()
#  {
#    echo "Re-setting ownership to $USER:$USER"
#    sudo chown -R $USER:$USER $AAA_SCRIPT_DIR/volumes
#    
#    echo "Deleting log files"
#    sudo rm -r $AAA_SCRIPT_DIR/volumes/log/
#  }
#
#}

#speedtest_library()
#{
#  # set interface type
#  if [ $speedtestInterfaceVlan = "0" ]; then
#    speedtestIf="$speedtestInterface"
#    isVlanIf="false"
#  else
#    speedtestIf="$speedtestInterface.$speedtestInterfaceVlan"
#    isVlanIf="true"
#  fi
#
#  # adds a physical interface to the radius bridge (for external reachability)
#  attach_bridge_interface()
#  {
#    # create vlan interface, if necessary 
#    if [ $(sudo ip link show | grep "$speedtestIf" | wc -l) -lt 1 ]; then
#      if [ $isVlanIf = "true" ]; then
#        ipv4_to_lamac $speedtestIpAddress
#        create_vlan_interface $speedtestIf
#      fi
#    fi
#
#    if [ $(sudo brctl show $speedtestBridgeName |grep $speedtestIf |wc -l) -gt 0 ]; then
#      echo "Interface $speedtestIf already assigned to bridge, nothing to do"
#      sudo brctl show $speedtestBridgeName |grep $speedtestIf
#      return
#    elif [ $(sudo brctl show | grep $speedtestIf |wc -l) -gt 0 ]; then
#      echo "Interface $speedtestIf assigned to another bridge, please remove interface first"
#      return
#    fi
#  
#    sudo ip link set dev $speedtestIf master $speedtestBridgeName
#  }
#
#  detach_bridge_interface()
#  {
#    if [ $(sudo brctl show $speedtestBridgeName |grep $speedtestIf |wc -l) -gt 0 ]; then 
#      sudo ip link set dev $speedtestIf nomaster
#    fi
#
#    [ $isVlanIf = "true" ] && delete_vlan_interface $speedtestIf
#  }
#
#  build_compose_file() 
#  {
#    stBS=$(echo $speedtestBridgeSubnet | sed -e "s.\/.\\\/.g")
#    #echo $sttBS
#    cat $composeSampleFile | \
#    sed -e "s/\$speedtestBridgeName/$speedtestBridgeName/g" \
#      -e "s/\$speedtestIpAddress/$speedtestIpAddress/g" \
#      -e "s/\$speedtestBridgeSubnet/$stBS/g" > $composeDestFile
#    #cat $temp_yaml_file
#  }
#
#  remove_running_conf_file()
#  {
#    # remove old file
#    if [ -e $ST_SCRIPT_DIR/running.conf ]; then
#      sudo chmod +w $ST_SCRIPT_DIR/running.conf
#      rm -f $ST_SCRIPT_DIR/running.conf
#    fi
#  }
#
#  write_running_config()
#  {
#    remove_running_conf_file
#
#    echo "# RUNNING CONFIGURATION, DO NOT EDIT THIS FILE!!!" > $ST_SCRIPT_DIR/running.conf
#    cat $FUNC_LIB_SCRIPT_DIR/ancillary.conf >> $ST_SCRIPT_DIR/running.conf
#
#    # make it read-only
#    sudo chmod 444 $ST_SCRIPT_DIR/running.conf
#  }
#
#  clean_up_directory()
#  {
#    echo "Deleting dynamic configuration files"
#    sudo rm -r $ST_SCRIPT_DIR/config/
#  }
#
#}

#bgp_library()
#{
#  [ $DEBUG = true ] && echo "${FUNCNAME[0]}"
#
#  # set interface type
#  if [ $bgp1InterfaceVlan = "0" ]; then
#    bgp1If="$bgp1Interface"
#    bgp1isVlanIf="false"
#  else
#    bgp1If="$bgp1Interface.$bgp1InterfaceVlan"
#    bgp1isVlanIf="true"
#  fi
#  [ $DEBUG = true ] && echo "  bgp1If: $bgp1If"
#
#  if [ $bgp2InterfaceVlan = "0" ]; then
#    bgp2If="$bgp2Interface"
#    bgp2isVlanIf="false"
#  else
#    bgp2If="$bgp2Interface.$bgp2InterfaceVlan"
#    bgp2isVlanIf="true"
#  fi
#  [ $DEBUG = true ] && echo "  bgp2If: $bgp2If"
#    
#  # adds a physical interfaces to a bgp bridge (for external reachability)
#  attach_bridge_interface()
#  {
#  [ $DEBUG = true ] && echo "  ${FUNCNAME[0]}"
#    # create vlan interface for first bgp connection (if necessary)
#    if [ $(sudo ip link show | grep "$bgp1If" | wc -l) -lt 1 ]; then
#      if [ $bgp1isVlanIf = "true" ]; then
#        ipv4_to_lamac $bgp1IpAddress
#        create_vlan_interface $bgp1If
#      fi
#    fi
#
#    if [ $(sudo brctl show $bgp1BridgeName |grep $bgp1If |wc -l) -gt 0 ]; then
#      echo "Interface $bgp1If already assigned to bridge, nothing to do"
#      sudo brctl show $bgp1BridgeName |grep $bgp1If
#      return
#    elif [ $(sudo brctl show | grep $bgp1If |wc -l) -gt 0 ]; then
#      echo "Interface $bgp1If assigned to another bridge, please remove interface first"
#      return
#    fi
#
#    sudo ip link set dev $bgp1If master $bgp1BridgeName
#
#    # create vlan interface for second bgp connection (if necessary)
#    if [ $(sudo ip link show | grep "$bgp2If" | wc -l) -lt 1 ]; then
#      if [ $bgp2isVlanIf = "true" ]; then
#        ipv4_to_lamac $bgp2IpAddress
#        create_vlan_interface $bgp2If
#      fi
#    fi
#
#    if [ $(sudo brctl show $bgp2BridgeName |grep $bgp2If |wc -l) -gt 0 ]; then
#      echo "Interface $bgp2If already assigned to bridge, nothing to do"
#      sudo brctl show $bgp2BridgeName |grep $bgp2If
#      return
#    elif [ $(sudo brctl show | grep $bgp2If |wc -l) -gt 0 ]; then
#      echo "Interface $bgp2If assigned to another bridge, please remove interface first"
#      return
#    fi
#  
#    sudo ip link set dev $bgp2If master $bgp2BridgeName
#  }
#
#  set_bridge_interface()
#  {
#    [ $DEBUG = true ] && echo "  ${FUNCNAME[0]}" 
#    [ $DEBUG = true ] && echo "    isp: $1 action: $2"
#    [ $DEBUG = true ] && echo "    bgp1If: $bgp1If bgp2If: $bgp2If"
#    isp=$1
#    action=$2
#    [ $isp = "isp1" ] && bridgeName=$bgp1BridgeName
#    [ $isp = "isp2" ] && bridgeName=$bgp2BridgeName
#
#    case $action in
#      up)
#        [ $DEBUG = true ] && echo "    sudo ip link set dev $bridgeName up"
#        sudo ip link set dev $bridgeName up
#        ;;
#      down)
#        [ $DEBUG = true ] && echo "    sudo ip link set dev $bridgeName down"
#        sudo ip link set dev $bridgeName down
#        ;;
#      *)
#        [ $DEBUG = true ] && echo "    \"$action\" is no valid action!"
#        exit
#    esac
#
#  }
#
#  detach_bridge_interface()
#  { 
#    [ $DEBUG = true ] && echo "  ${FUNCNAME[0]}"
#    if [ $(sudo brctl show $bgp1BridgeName |grep $bgp1If |wc -l) -gt 0 ]; then 
#      sudo ip link set dev $bgp1Interface nomaster
#    fi
#
#    [ $bgp1isVlanIf = "true" ] && delete_vlan_interface $bgp1If
#
#    if [ $(sudo brctl show $bgp2BridgeName |grep $bgp2If |wc -l) -gt 0 ]; then 
#      sudo ip link set dev $bgp2Interface nomaster
#    fi
#
#    [ $bgp2isVlanIf = "true" ] && delete_vlan_interface $bgp2If
#
#  }
#
#  build_compose_file() 
#  {
#    [ $DEBUG = true ] && echo "  ${FUNCNAME[0]}"
#    bgp1BS=$(echo $bgp1BridgeSubnet | sed -e "s.\/.\\\/.g")
#    bgp2BS=$(echo $bgp2BridgeSubnet | sed -e "s.\/.\\\/.g")
#    [ $DEBUG = true ] && echo "    bgp1BS: $bgp1BS"
#    [ $DEBUG = true ] && echo "    bgp2BS: $bgp2BS"
#
#    cat $composeSampleFile | \
#    sed -e "s/\$bgp1IpAddress/$bgp1IpAddress/g" \
#      -e "s/\$bgp2IpAddress/$bgp2IpAddress/g" \
#      -e "s/\$bgp1BridgeName/$bgp1BridgeName/g" \
#      -e "s/\$bgp2BridgeName/$bgp2BridgeName/g" | \
#      sed -e "s/\$bgp3BridgeName/$bgp3BridgeName/g" \
#      -e "s/\$bgp4BridgeName/$bgp4BridgeName/g" \
#      -e "s/\$bgp5BridgeName/$bgp5BridgeName/g" | \
#      sed -e "s/\$bgp1BridgeSubnet/$bgp1BS/g" \
#      -e "s/\$bgp2BridgeSubnet/$bgp2BS/g" > $composeDestFile
#    
#    [ $DEBUG = true ] && echo "    created compose file $composeDestFile"
#  }
#
#  remove_running_conf_file()
#  {
#    [ $DEBUG = true ] && echo "  ${FUNCNAME[0]}"
#    # remove old file
#    if [ -e $BGP_SCRIPT_DIR/running.conf ]; then
#      sudo chmod +w $BGP_SCRIPT_DIR/running.conf
#      rm -f $BGP_SCRIPT_DIR/running.conf
#    fi
#  }
#
#  write_running_config()
#  {
#    [ $DEBUG = true ] && echo "  ${FUNCNAME[0]}"
#    remove_running_conf_file
#    echo "# RUNNING CONFIGURATION, DO NOT EDIT THIS FILE!!!" > $BGP_SCRIPT_DIR/running.conf
#    cat $FUNC_LIB_SCRIPT_DIR/ancillary.conf >> $BGP_SCRIPT_DIR/running.conf
#
#    # make it read-only
#    sudo chmod 444 $BGP_SCRIPT_DIR/running.conf
#  }
# 
#  clean_up_directory()
#  {
#    [ $DEBUG = true ] && echo "  ${FUNCNAME[0]}"
#    echo "Re-setting ownership to $USER:$USER"
#    sudo chown -R $USER:$USER $BGP_SCRIPT_DIR/volumes
#    
#    echo "Deleting log files"
#    sudo rm -r $BGP_SCRIPT_DIR/volumes/log/
#  }
#
#}

#subscriber_library()
#{
#  [ $DEBUG = true ] && echo "${FUNCNAME[0]}"
#
#  create_subscriber()
#  {
#    [ $DEBUG = true ] && echo "  ${FUNCNAME[0]}"
#    # check if vlan or qinq
#    [ $(echo $subInterface | grep "\." | wc -l) -gt 0 ] && isVlanIf=true || isVlanIf=false 
#    [ $DEBUG = true ] && echo "    Vlan check, isVlanIf=$isVlanIf"
#
#    # set up vlan interface
#    [ $isVlanIf = true ] && create_vlan_interface $subInterface
#    
#    # make sure parent if is up
#    [ $isVlanIf = false ] && { \
#      sudo ip link set dev $subInterface up;\
#      [ $DEBUG = true ] && echo "  Bringin up interface $subInterface";\
#    }
#  }
#
#  remove_subscriber()
#  {
#    [ $DEBUG = true ] && echo "  ${FUNCNAME[0]}"
#    [ $(echo $subInterface | grep "\." | wc -l) -gt 0 ] && isVlanIf=true || isVlanIf=false
#    [ $DEBUG = true ] && echo "    Vlan check, isVlanIf=$isVlanIf"
#
#    # delete vlan interface
#    [ $isVlanIf = true ] && delete_vlan_interface $subInterface
#  }
#}


#### main
#case $SERVICE_LIBRARY in
#  aaa)
#    aaa_library
#    ;;
#  speedtest)
#    speedtest_library
#    ;;
#  bgp)
#    bgp_library
#    ;;
#  subscriber)
#    subscriber_library
#    ;;
#  tacplus)
#    tacplus_library
#    ;;
#  *) 
#    echo "unknown service"
#    ;;
#esac
#
#commons_library
